use tok::{self, Tok};

grammar<'input>(text: &'input str);

CommaList<T>: Vec<T> = {
	<head:T> <tail:("," <T>)*> => {
		let mut v = vec![head];
		v.extend_from_slice(&tail);
		v
	}
};

pub CmdList: Vec<()> = {
	<v:(<Cmd> ";")*> <c:Cmd?> => match c {
		None => v,
		Some(c) => {
			let mut v = v;
			v.push(c);
			v
		}
	}
};

pub Cmd = {
	// TODO ("explain" ("query" "plan")? )?
	Begin,
	Commit,
	Rollback,
	Savepoint,
	Release,
};

Begin: () = {
	"begin" TransactionType? ("transaction" Name?)? => ()
};
TransactionType = {
	"deferred",
	"immediate",
	"exclusive",
};

Commit: () = {
	"commit" ("transaction" Name?)? => (),
	"end" ("transaction" Name?)? => (),
};

Rollback: () = {
	"rollback" ("transaction" Name?)? => (),
	"rollback" ("transaction" Name?)? "to" "savepoint"? Name => ()
};

Savepoint: () = {
	"savepoint" Name => ()
};
Release: () = {
	"release" "savepoint"? Name => (),
};

CreateTable: () = {
	CreateTableStart "(" CommaList<Column> CommaList<NamedTableConstraint>? ")" ("without" "Id")? => (), // TODO check "Id" == "rowid"*
//	CreateTableStart "as" Select => ()
};
CreateTableStart: () = {
	"create" "temp"? "table" ("if" "not" "exists")? QualifiedTableName => ()
};

Column: () = {
	Name TypeName? (("constraint" Name)? ColumnConstraint)* => ()
};

Name = {
	"Id",
	// TODO "StringLiteral",
	// TODO "cross", "inner", left", "natural", "outer", "right"
};
QualifiedTableName: () = {
	(Name ".")? Name => ()
};
TypeName: () = {
	"Id"+ => (),
	"Id"+ "(" SignedNumber ")" => (),
	"Id"+ "(" SignedNumber "," SignedNumber ")" => (),
};
SignedNumber: () = {
	"+"? NumericLiteral => (),
	"-" NumericLiteral => (),
};
NumericLiteral: () = {
	"Integer" => (),
	"Float" => (),
};

ColumnConstraint: () = {
	"primary" "key" SortOrder? ConflictClause? "autoincrement"? => (),
	"not"? "null" ConflictClause? => (),
	"unique" ConflictClause? => (),
	"check" "(" Expr ")" => (),
	"default" DefaultValue => (),
	"collate" "Id" => (),
	ForeignKeyClause => (),
};

ConflictClause: () = {
	"on" "conflict" ResolveType => ()
};
ResolveType = {
	"rollback",
	"abort",
	"fail",
	"ignore",
	"replace",
};

DefaultValue: () = {
	SignedNumber => (),
	LiteralValue => (),
	"(" Expr ")" => (),
};

ForeignKeyClause: () = {
	"references" Name ("(" CommaList<Name> ")")? RefArg* DeferSubclause? => (),
};
RefArg: () = {
	"on" "delete" RefAct => (),
	"on" "update" RefAct => (),
	"match" Name => (),
};
RefAct: () = {
	"set" "null" => (),
	"set" "default" => (),
	"cascade" => (),
	"restrict" => (),
	"no" "action" => (),
};
DeferSubclause: () = {
	"not"? "deferred" InitDeferredPred? => ()
};
InitDeferredPred: () = {
	"initially" "deferred" => (),
	"initially" "immediate" => (),
};

LiteralValue: () = {
	NumericLiteral => (),
	"StringLiteral" => (),
	"Blob" => (),
	"null" => (),
	"current_date" => (),
	"current_time" => (),
	"current_timestamp" => (),
};

SortOrder = {
	"asc",
	"desc"
};

NamedTableConstraint: () = {
	("constraint" Name)? TableConstraint => ()
};
TableConstraint: () = {
	"primary" "key" "(" CommaList<IndexedColumn> ")" ConflictClause? => (),
	"unique" "(" CommaList<IndexedColumn> ")" ConflictClause? => (),
	"check" "(" Expr ")" => (),
	"foreign" "key" "(" CommaList<Name> ")" ForeignKeyClause => (),
};
IndexedColumn: () = {
	Name ("collate" "Id")? SortOrder? => (),
};

Expr: () = {
	LiteralValue => (),
	// TODO
};

//DropTable = {
//	
//};
//
//CreateView = {
//	
//};
//DropView = {
//	
//};
//
//Select = {
//	
//};
//
//Delete = {
//	
//};
//
//Update = {
//	
//};
//
//Insert = {
//	
//};
//
//CreateIndex = {
//	
//};
//DropIndex = {
//	
//};
//
//Vacuum = {
//	
//};
//
//Pragma = {
//	
//};
//
//CreateTrigger = {
//	
//};
//DropTrigger = {
//	
//};
//
//Attach = {
//	
//};
//Detach = {
//	
//};
//
//Reindex = {
//	
//};
//
//Analyze = {
//	
//};
//
//AlterTable = {
//	
//};
//
//CreateVirtualTable = {
//	
//};

extern {
    type Location = usize;
    type Error = tok::Error;
    enum Tok<'input> {
				"abort" => Tok::Abort,
				"action" => Tok::Action,
				"add" => Tok::Add,
				"after" => Tok::After,
				"all" => Tok::All,
				"alter" => Tok::Alter,
				"analyze" => Tok::Analyze,
				"and" => Tok::And,
				"as" => Tok::As,
				"asc" => Tok::Asc,
				"attach" => Tok::Attach,
				"autoincrement" => Tok::Autoincr,
				"before" => Tok::Before,
				"begin" => Tok::Begin,
				"between" => Tok::Between,
				"by" => Tok::By,
				"cascade" => Tok::Cascade,
				"case" => Tok::Case,
				"cast" => Tok::Cast,
				"check" => Tok::Check,
				"collate" => Tok::Collate,
				"column" => Tok::ColumnKw,
				"commit" => Tok::Commit,
				"conflict" => Tok::Conflict,
				"constraint" => Tok::Constraint,
				"create" => Tok::Create,
				"cross" => Tok::Cross,
				"current_date" => Tok::CurrentDate,
				"current_time" => Tok::CurrentTime,
				"current_timestamp" => Tok::CurrentTimestamp,
				"database" => Tok::Database,
				"default" => Tok::Default,
				"deferrable" => Tok::Deferrable,
				"deferred" => Tok::Deferred,
				"delete" => Tok::Delete,
				"desc" => Tok::Desc,
				"detach" => Tok::Detach,
				"distinct" => Tok::Distinct,
				"drop" => Tok::Drop,
				"each" => Tok::Each,
				"else" => Tok::Else,
				"end" => Tok::End,
				"escape" => Tok::Escape,
				"except" => Tok::Except,
				"exclusive" => Tok::Exclusive,
				"exists" => Tok::Exists,
				"explain" => Tok::Explain,
				"fail" => Tok::Fail,
				"for" => Tok::For,
				"foreign" => Tok::Foreign,
				"from" => Tok::From,
				"full" => Tok::Full,
				"glob" => Tok::Glob,
				"group" => Tok::Group,
				"having" => Tok::Having,
				"if" => Tok::If,
				"ignore" => Tok::Ignore,
				"immediate" => Tok::Immediate,
				"in" => Tok::In,
				"index" => Tok::Index,
				"indexed" => Tok::Indexed,
				"initially" => Tok::Initially,
				"inner" => Tok::Inner,
				"insert" => Tok::Insert,
				"instead" => Tok::Instead,
				"intersect" => Tok::Intersect,
				"into" => Tok::Into,
				"is" => Tok::Is,
				"isnull" => Tok::IsNull,
				"join" => Tok::Join,
				"key" => Tok::Key,
				"left" => Tok::Left,
				"like" => Tok::Like,
				"limit" => Tok::Limit,
				"match" => Tok::Match,
				"natural" => Tok::Natural,
				"no" => Tok::No,
				"not" => Tok::Not,
				"notnull" => Tok::NotNull,
				"null" => Tok::Null,
				"of" => Tok::Of,
				"offset" => Tok::Offset,
				"on" => Tok::On,
				"or" => Tok::Or,
				"order" => Tok::Order,
				"outer" => Tok::Outer,
				"plan" => Tok::Plan,
				"pragma" => Tok::Pragma,
				"primary" => Tok::Primary,
				"query" => Tok::Query,
				"raise" => Tok::Raise,
				"recursive" => Tok::Recursive,
				"references" => Tok::References,
				"regexp" => Tok::Regexp,
				"reindex" => Tok::Reindex,
				"release" => Tok::Release,
				"rename" => Tok::Rename,
				"replace" => Tok::Replace,
				"restrict" => Tok::Restrict,
				"right" => Tok::Right,
				"rollback" => Tok::Rollback,
				"row" => Tok::Row,
				"savepoint" => Tok::Savepoint,
				"select" => Tok::Select,
				"set" => Tok::Set,
				"table" => Tok::Table,
				"temp" => Tok::Temp,
				"then" => Tok::Then,
				"to" => Tok::To,
				"transaction" => Tok::Transaction,
				"trigger" => Tok::Trigger,
				"union" => Tok::Union,
				"unique" => Tok::Unique,
				"update" => Tok::Update,
				"using" => Tok::Using,
				"vacuum" => Tok::Vacuum,
				"values" => Tok::Values,
				"view" => Tok::View,
				"virtual" => Tok::Virtual,
				"when" => Tok::When,
				"where" => Tok::Where,
				"with" => Tok::With,
				"without" => Tok::Without,

        "StringLiteral" => Tok::StringLiteral(<&'input str>),
        "Id" => Tok::Id(<&'input str>),
        "Variable" => Tok::Variable(<&'input str>),

        "Blob" => Tok::Blob(<&'input str>),
        "Integer" => Tok::Integer(<&'input str>),
        "Float" => Tok::Float(<&'input str>),

        "&" => Tok::BitAnd,
        "~" => Tok::BitNot,
        "|" => Tok::BitOr,
        "," => Tok::Comma,
        "." => Tok::Dot,
        "=" => Tok::Equals,
        ">" => Tok::GreaterThan,
        "=>" => Tok::GreaterEquals,
        "(" => Tok::LeftParen,
        "<<" => Tok::LeftShift,
        "<=" => Tok::LessEquals,
        "<" => Tok::LessThan,
        "-" => Tok::Minus,
        "<>" => Tok::NotEquals,
        "+" => Tok::Plus,
        "%" => Tok::Reminder,
        ")" => Tok::RightParen,
        ">>" => Tok::RightShift,
        ";" => Tok::Semi,
        "/" => Tok::Slash,
        "*" => Tok::Star,
    }
}
